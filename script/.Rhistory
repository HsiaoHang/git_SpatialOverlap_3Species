group_by(Year,Quarter) %>%
tally()
theme <-
theme_bw()+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line=element_line(colour = "black"),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
legend.position="none")
# Create cpue.lngt.subarea.yearqua
cpue.lngt.subarea.yearqua <-
dd.stn %>%
group_by(Region,Species,YearQua,SubArea,LngtClass) %>%
summarise(CPUE_Lngt_SubArea_YearQua = sum(CPUE_number_per_hour),
.groups = "drop") %>%
group_by(Region,Species, YearQua, SubArea) %>%
mutate(CPUE_All_Lngt_SubArea_Yearqua = sum(CPUE_Lngt_SubArea_YearQua))
cpue.lngt.yearqua <-
dd.stn %>%
group_by(Region,Species,YearQua,LngtClass) %>%
summarise(CPUE_Lngt_YearQua = sum(CPUE_number_per_hour),
.groups = "drop") %>%
# Add CPUE_All_Lngt_Yearqua
group_by(Region, Species, YearQua) %>%
mutate(CPUE_All_Lngt_Yearqua = sum(CPUE_Lngt_YearQua)) %>%
mutate(Denstiy_CPUE_Lngt_Yearqua =
CPUE_Lngt_YearQua/CPUE_All_Lngt_Yearqua)
cpue.lngt.yearqua.before.cut <-
dd.stn.before.cut %>%
group_by(Region,Species,YearQua,LngtClass) %>%
summarise(CPUE_Lngt_YearQua = sum(CPUE_number_per_hour),
.groups = "drop") %>%
# Add CPUE_All_Lngt_Yearqua
group_by(Region, Species, YearQua) %>%
mutate(CPUE_All_Lngt_Yearqua = sum(CPUE_Lngt_YearQua)) %>%
mutate(Denstiy_CPUE_Lngt_Yearqua =
CPUE_Lngt_YearQua/CPUE_All_Lngt_Yearqua)
dd.cut <- cpue.lngt.yearqua.before.cut %>% group_by(Species) %>%
summarise(cpue_sum = sum(CPUE_Lngt_YearQua))
dd.all <- cpue.lngt.yearqua %>% group_by(Species) %>%
summarise(cpue_sum = sum(CPUE_Lngt_YearQua))
dd.join <- left_join(dd.all, dd.cut, by = "Species")
dd.join %>% mutate(
ratio = (cpue_sum.y - cpue_sum.x)/cpue_sum.y)
cpue.length.subarea.yearqua <-dd.stn %>%
group_by(Region, Species) %>%
# (Original length class - min class)/ (length range/10)
mutate(Length=(LngtClass-min(LngtClass)) %/% ((max(LngtClass)-min(LngtClass))/20)) %>%
filter (Length < 20) %>%
# Add cpue of all LngtClasses that belong to each Length
group_by(Region,Species,YearQua,SubArea,Length) %>%
summarize(CPUE_Length_Subarea_Yearqua=sum(CPUE_number_per_hour))
cpue.subarea.yearqua <-cpue.length.subarea.yearqua %>%
group_by(Region, Species, YearQua, SubArea) %>%
summarize(CPUE_All_Length_Subarea_Yearqua = sum(CPUE_Length_Subarea_Yearqua))
# Add CPUE_All_Length_Subarea_Yearqua to tibble cpue.length.subarea.yearqua
cpue.length.subarea.yearqua<-cpue.length.subarea.yearqua %>%
left_join(cpue.subarea.yearqua,by=c("Region","Species", "YearQua", "SubArea"))
# Check how many ind in each Length
cpue.length.subarea.yearqua %>%
group_by(Region,Species, Length) %>%
tally()
dd.stn %>%
group_by(Region, Species) %>%
# (Original length class - min class)/ (length range/10)
summarise(range = max(LngtClass)-min(LngtClass),
interval= range/20)
cpue.length.year <- cpue.length.subarea.yearqua %>%
group_by(Region, Species,YearQua,Length) %>%
summarize(CPUE_Length_Year=sum(CPUE_Length_Subarea_Yearqua))
# Sum of all CPUE per species (sum all length) per YearQua
cpue.year <- cpue.length.year %>%
group_by(Region, YearQua, Species) %>%
summarize(CPUE_Year = sum(CPUE_Length_Year))
#--------------------------------------------
# Compute Prop_CPUE_Length_Year
# 1 Add CPUE_Year to tibble cpue.length.year
cpue.length.year<-cpue.length.year %>%
left_join(cpue.year,by=c("Region","YearQua","Species"))
# 2 Compute Prop_CPUE_Length_Year in cpue.length.year
cpue.length.year <- cpue.length.year %>%
mutate(Prop_CPUE_Length_Year = CPUE_Length_Year / CPUE_Year)
#----------------------------------------
# Create log_CPUE_Year in cpue.year
cpue.year <- cpue.year %>%
mutate(log_CPUE_Year = log(CPUE_Year))
#---------------------------------------
# Create scaleed log_CPUE_Year in cpue.length.year
# 1 scale function
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# 2 Scale
cpue.length.year <- cpue.length.year %>%
group_by(Region,Species,Length) %>%
mutate(CPUE_Length_Year_scale_log=
scale_this(log(CPUE_Length_Year)))
# # Compute size index over year from 10 Length classes
# size.index.year <- cpue.length.year %>%
#   mutate(p=CPUE_Length_Year/CPUE_Year) %>%
#   group_by(Region, Species, YearQua) %>%
#   summarize(Shannon_10Length = sum(-p*log(p), na.rm=T),
#             Mean_age_10Length = sum(Length*CPUE_Length_Year)/sum(CPUE_Length_Year))
#
# # Compute size index from raw Lngt class
# size.index.year.Lngt <-cpue.lngt.yearqua %>%
#   mutate(p=CPUE_Lngt_YearQua/CPUE_All_Lngt_Yearqua) %>%
#   group_by(Region, Species, YearQua) %>%
#   summarize(Shannon_RawLngt = sum(-p*log(p), na.rm=T),
#             Richness_size_RawLngt = n_distinct(LngtClass),
#             Mean_age_RawLngt = sum(LngtClass*CPUE_Lngt_YearQua)/sum(CPUE_Lngt_YearQua))
#
# # Incorporate above to cpue.year
# cpue.year <- full_join(cpue.year,size.index.year,
#                        by=c("Region", "Species", "YearQua"))
#
# cpue.year <- full_join(cpue.year,size.index.year.Lngt,
#                        by = c("Region", "Species", "YearQua"))
home.range.year <- cpue.subarea.yearqua %>%
group_by(Region, Species, YearQua) %>%
# use n_distinct(SubArea) to count the number of SubAreas
summarise(Number_Subarea_All_Length=n_distinct(SubArea))
# incorporate to cpue.year
cpue.year <- full_join(cpue.year,home.range.year ,
by = c("Region", "Species", "YearQua"))
# Compute Num_SubArea_Length, add to cpue.length.year
num.subarea.length <- cpue.length.subarea.yearqua %>%
group_by(Region, Species, YearQua, Length) %>%
summarise(Num_SubArea_Length = n_distinct(SubArea))
cpue.length.year <-
left_join(cpue.length.year, num.subarea.length,
by = c("Region","Species", "YearQua","Length"))
# add Number_SubArea_All_Length from home.range.year to cpue.length.year
cpue.length.year <-
left_join(cpue.length.year, home.range.year,
by = c("Region", "Species", "YearQua")) %>%
mutate_at("Length", as.factor)
# # Compute proportion of Num_SubArea over Num_SubArea_All_Length
# cpue.length.year <- cpue.length.year %>%
#   mutate(Prop_SubArea_Length = Num_SubArea_Length / Number_Subarea_All_Length) %>%
#   ungroup(Length) %>%
#   mutate(Length = factor(
#     Length, levels=c("0","1","2","3","4",
#                      "5","6","7","8","9",
#                      "10","11","12","13","14","15",
#                      "16","17","18","19")))
# # Compute Mean_Prop_Subarea
# cpue.length.year.mean <-
#   cpue.length.year %>%
#   group_by(Region,Species,YearQua) %>%
#   summarise(Mean_Prop_SubArea = mean(Prop_SubArea_Length),
#             new = list(mean_se(Prop_SubArea_Length))) %>%
#   unnest(new)
#
#
# cpue.length.year.mean <-
#   cpue.length.year.mean %>%
#   select(-y) %>%
#   rename(Min_Prop_SubArea = ymin,
#          Max_Prop_SubArea = ymax)
#
#
# cpue.year <-
#   left_join(cpue.year, cpue.length.year.mean,
#             by = c("Region","Species", "YearQua"))
# 1 extract maximum range of size group over time then add to cpue.length.year
max.subarea.length <- num.subarea.length %>%
group_by(Region, Species, Length) %>%
summarise(Max_SubArea_Length = max (Num_SubArea_Length)) %>%
mutate_at("Length", as.factor)
cpue.length.year <-
left_join(cpue.length.year, max.subarea.length,
by = c("Region","Species", "Length"))
# 2 Compute standardized subarea length
cpue.length.year <- cpue.length.year %>%
group_by(Region, Species, YearQua, Length) %>%
mutate(Stan_SubArea_Length =
Num_SubArea_Length / Max_SubArea_Length)
# 3 Compute mean standardized subarea and add to cpue.year
Stan_Subarea <- cpue.length.year %>%
group_by(Region, Species, YearQua) %>%
summarise(Mean_Stan_SubArea = mean(Stan_SubArea_Length))
cpue.year <-
left_join(cpue.year, Stan_Subarea,
by = c("Region","Species","YearQua"))
out <- vector(mode = "list")
for (i in 1:190){
# select two length from 45 combinations
x <- combn(0:19, 2)[,i][1]
y <- combn(0:19, 2)[,i][2]
# Subarea of length group x
cpue.x <- cpue.length.subarea.yearqua %>%
group_by(Region,Species,YearQua) %>%
filter(Length==x & CPUE_Length_Subarea_Yearqua>0) %>%
dplyr::select(Region, Species, SubArea,YearQua)
# Subarea of length group y
cpue.y <- cpue.length.subarea.yearqua %>%
group_by(Region,Species,YearQua) %>%
filter(Length==y & CPUE_Length_Subarea_Yearqua>0) %>%
dplyr::select(Region, Species, SubArea,YearQua)
# intersect
intersect <-
dplyr::intersect(cpue.x, cpue.y) %>%
group_by (Region, Species, YearQua) %>%
summarise(Number_intersect=n_distinct(SubArea),
.groups = "drop")
# union
union <-
dplyr::union(cpue.x, cpue.y) %>%
group_by (Region, Species,YearQua) %>%
summarise(Number_union=n_distinct(SubArea),
.groups = "drop")
# overlap
overlap <-
full_join(intersect,union,
by=c("Region","Species", "YearQua")) %>%
replace_na(list(Number_intersect = 0)) %>%
mutate(Area_overlap = Number_intersect / Number_union)
# Add x and y column (pair length)
overlap <- overlap %>% add_column(x, y)
# store in List
out[[i]] <- overlap
}
out.all<-bind_rows(out,.id = "id") # id is combination of pairs
out.all.overlap <-out.all
# Calculate average area overlap among all combinations
average_out<-out.all %>%
group_by(Region, Species,YearQua) %>%
summarize(Mean_intersect = mean(Number_intersect),
Mean_union = mean(Number_union),
Paired_habitat_overlap = mean(Area_overlap, na.rm = T),
# use mean_se() to create mean, min, and max area_overlap
new = list(mean_se(Area_overlap)),
.groups = "drop") %>%
unnest(new)
# incorporate average.out with cpue.yearqua
average_out_arranged <- average_out %>%
# remove y from new as is same as Mean_Area_Overlap
select(-y) %>%
rename(Min_Paired_habitat_overlap = ymin,
Max_Paired_habitat_overlap = ymax)
cpue.year <- full_join(cpue.year,average_out_arranged,
by = c("Region", "Species","YearQua"))
out_deno <- vector(mode = "list")
for (i in 1:190){
# select two length from 45 combinations
x <- combn(0:19, 2)[,i][1]
y <- combn(0:19, 2)[,i][2]
# Subarea of length group x
cpue.x <- cpue.length.subarea.yearqua %>%
group_by(Species,YearQua) %>%
filter(Length==x & CPUE_Length_Subarea_Yearqua>0) %>%
dplyr::select(Region, Species, SubArea,YearQua)
# Subarea of length group y
cpue.y <- cpue.length.subarea.yearqua %>%
group_by(Species,YearQua) %>%
filter(Length==y & CPUE_Length_Subarea_Yearqua>0) %>%
dplyr::select(Region, Species, SubArea,YearQua)
# intersect
intersect <-
dplyr::intersect(cpue.x, cpue.y) %>%
group_by (Region, Species, YearQua) %>%
summarise(Number_intersect=n_distinct(SubArea),
.groups = "drop")
# denominator_x
deno_x <- cpue.x %>%
group_by (Region, Species,YearQua) %>%
summarise(Number_x = n_distinct(SubArea),
.groups = "drop")
# demoninator_y
deno_y <- cpue.y %>%
group_by (Region, Species, YearQua) %>%
summarise(Number_y = n_distinct(SubArea),
.groups = "drop")
# join deno_x and deno_y
deno <- full_join(deno_x, deno_y,
by = c("Region","Species", "YearQua"))
# overlap_size_deno
overlap_size_deno <-
full_join(intersect, deno,
by=c("Region","Species", "YearQua")) %>%
replace_na(list(Number_intersect = 0)) %>%
mutate(Area_overlap_deno_x = Number_intersect / Number_x,
Area_overlap_deno_y = Number_intersect / Number_y)
# Add x and y column (pair length)
overlap_size_deno <- overlap_size_deno %>% add_column(x, y)
# store in List
out_deno[[i]] <- overlap_size_deno
}
# bind lists by rows
out_deno_all<-bind_rows(out_deno,.id = "id") # id is combination of pairs
# create mean of Area_overlap_deno_x and Area_overlap_deno_y
out_deno_all <- out_deno_all %>%
mutate(Mean_Area_overlap_deno_xy =
1/2*(Area_overlap_deno_x + Area_overlap_deno_y))
# Calculate average area overlap among 190 combinations
average_out_deno_out <- out_deno_all %>%
group_by(Region, Species,YearQua) %>%
# use mean_se() to create mean, min, and max area_overlap
summarize(Paired_habitat_overlap_deno =
mean(Mean_Area_overlap_deno_xy, na.rm = T),
new = list(mean_se(Mean_Area_overlap_deno_xy)),
.groups = "drop") %>%
unnest(new)
# incorporate average_out_deno_out with cpue.yearqua
average_out_deno_out <- average_out_deno_out %>%
# remove y from new as is same as Mean_Area_Overlap_deno
select(-y) %>%
rename(Min_Paired_habitat_overlap_deno = ymin,
Max_Paired_habitat_overlap_deno = ymax)
cpue.year <- full_join(cpue.year,average_out_deno_out,
by = c("Region", "Species","YearQua"))
# Add lon, lat
cpue.length.subarea.yearqua.geo <-
cpue.length.subarea.yearqua %>%
mutate(lon = ices.rect(SubArea)$lon,
lat = ices.rect(SubArea)$lat)
# calculate CPUE-weighted mean lon and lat for each length
cpue.length.subarea.yearqua.geo.mean <-
cpue.length.subarea.yearqua.geo %>%
group_by(Region, Species, YearQua,Length) %>%
summarise(
Centroid_lon = sum(CPUE_Length_Subarea_Yearqua * lon)/
sum(CPUE_Length_Subarea_Yearqua),
Centroid_lat = sum(CPUE_Length_Subarea_Yearqua * lat)/
sum(CPUE_Length_Subarea_Yearqua)) %>%
ungroup() %>%
mutate_at('Length',as.factor)
# Add to cpue.length.yearqua
cpue.length.year <-
full_join(cpue.length.year,
cpue.length.subarea.yearqua.geo.mean,
by=c("Region", "Species", "YearQua","Length"))
# All 190 pair combinations
# combn(0:19,2)
out_centroid <- vector(mode = "list")
for (i in 1:190){
# select two length from 45 combinations
x <- combn(0:19, 2)[,i][1]
y <- combn(0:19, 2)[,i][2]
# subset of length group x
lon.lat.x <- cpue.length.year %>%
group_by(Region,Species,YearQua) %>%
filter(Length == x) %>%
dplyr::select(Region, Species, Length,YearQua,
Centroid_lon, Centroid_lat)
# subset of length group y
lon.lat.y <- cpue.length.year %>%
group_by(Region,Species,YearQua) %>%
filter(Length == y) %>%
dplyr::select(Region, Species, Length,YearQua,
Centroid_lon, Centroid_lat)
# join x and y
lon.lat.xy <-
full_join(lon.lat.x, lon.lat.y,
by=c("Region","Species",
"YearQua"))
# Absoluate distance between centroids
lon.lat.xy <- lon.lat.xy %>%
mutate(Distance_lon = abs(Centroid_lon.x - Centroid_lon.y),
Distance_lat = abs(Centroid_lat.x - Centroid_lat.y))
# Add x and y column (pair length)
lon.lat.xy <- lon.lat.xy %>% add_column(x, y)
# store in List
out_centroid[[i]] <- lon.lat.xy
}
out_centroid_all<-bind_rows(out_centroid,.id = "id") # id is combination of pairs
# Calculate average area overlap among 45 combinations
average_out_centroid <- out_centroid_all %>%
group_by (Region, Species,YearQua) %>%
summarize(new = list(mean_se(Distance_lon)),
new1 = list(mean_se(Distance_lat))) %>%
unnest(new) %>%
rename(Mean_paired_lon_distance = y,# delete this later
Min_paired_lon_distance = ymin,
Max_paired_lon_distance = ymax) %>%
unnest(new1) %>%
rename(Mean_paired_lat_distance = y,# delete this later
Min_paired_lat_distance = ymin,
Max_paired_lat_distance = ymax)
# incorporate average_out_centroid with cpue.year
cpue.year <- full_join(cpue.year,average_out_centroid,
by = c("Region", "Species","YearQua"))
# retain useful variables for 3 tibbles
out.all.overlap <- out.all.overlap %>%
select(- Number_intersect, - Number_union)
out_deno_all <- out_deno_all %>%
select(- Area_overlap_deno_x, - Area_overlap_deno_y,
- Number_intersect, - Number_x, - Number_y,
)
out_centroid_all <- out_centroid_all %>%
select(id,Region,Species,YearQua,Distance_lon,
Distance_lat,x, y)
# bind 3 tibbles
out_temp <- left_join(out.all.overlap,out_deno_all,
by = c ("id","Region","Species","YearQua",
"x","y"))
cpue.pair <- left_join(out_temp, out_centroid_all,
by = c ("id","Region","Species","YearQua",
"x","y"))
# House cleaning
cpue.pair <- cpue.pair %>%
rename(Pair_id = id)
# cpue.year <- cpue.year %>%
#   rename(Regional_Shannon = Shannon_RawLngt,
#          Regional_size_richness = Richness_size_RawLngt,
#          Regional_mean_size= Mean_age_RawLngt)
# Add Year, Quarter to all tibbles
cpue.lngt.yearqua <- cpue.lngt.yearqua %>%
separate(YearQua, c("Year", "Quarter"), remove =F) %>%
mutate_at("Year", as.numeric) %>%
mutate_at("Quarter",as.numeric)
cpue.length.subarea.yearqua <- cpue.length.subarea.yearqua %>%
separate(YearQua, c("Year", "Quarter"), remove =F) %>%
mutate_at("Year", as.numeric) %>%
mutate_at("Quarter",as.numeric)
cpue.length.year<- cpue.length.year %>%
separate(YearQua, c("Year", "Quarter"), remove =F) %>%
mutate_at("Year", as.numeric) %>%
mutate_at("Quarter",as.numeric)
cpue.year <-cpue.year %>%
separate(YearQua, c("Year", "Quarter"), remove =F) %>%
mutate_at("Year", as.numeric) %>%
mutate_at("Quarter",as.numeric)
cpue.pair <- cpue.pair %>%
separate(YearQua, c("Year", "Quarter"), remove =F) %>%
mutate_at("Year", as.numeric) %>%
mutate_at("Quarter",as.numeric)
# Create Year.scale as centered year
Year.scale <-  tibble(Year = seq(1977,2019,1)) %>%
mutate(Year_scale_centered=scale_this(Year))
FishingM <-read.csv("a0_ices_raw_data/Fishing_Mortality.csv")
FishingM <-read.csv("~/Dropbox/Academic/Ecoinformatics/a0_FishSpatial_MS/a_spatial_overlap_analysis/data/Fishing_Mortality.csv")
FishingM <-read.csv("~/Dropbox/Academic/Ecoinformatics/a0_FishSpatial_MS/a_spatial_overlap_analysis/data/Fishing_Mortality.csv")
FishingM <- FishingM %>%
mutate_at("Species", as.factor) %>%
mutate_at("Year", as.numeric) %>%
mutate_at("TSB_Tonnes", as.numeric)
# join fishing mortality and TSB data into three data tibbles
cpue.year <- left_join(cpue.year, FishingM, by = c("Year", "Species"))
cpue.length.year <- left_join(cpue.length.year, FishingM, by = c("Year", "Species"))
cpue.pair <- left_join(cpue.pair,FishingM, by = c("Year","Species"))
# housekeeping
cpue.year <- cpue.year %>%
ungroup() %>%
mutate_at("Species", as.factor)
cpue.length.year <- cpue.length.year %>%
ungroup() %>%
mutate_at("Species", as.factor)
cpue.pair <- cpue.pair %>%
ungroup() %>%
mutate_at("Species", as.factor)
# Read self compiled bottomT data 1977-2019
Temp_NS <-read.csv("~/Dropbox/Academic/Ecoinformatics/a0_FishSpatial_MS/a_spatial_overlap_analysis/data/bottomT_NS_1977_2019.csv")
# join temperature data into three data tibbles
cpue.length.year <- left_join(cpue.length.year, Temp_NS,
by=c("Year","Quarter"))
cpue.year <- left_join(cpue.year, Temp_NS,
by=c("Year","Quarter"))
cpue.pair <- left_join(cpue.pair,Temp_NS,
by = c("Year","Quarter"))
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# Create tibble Year.scale with scaled year variable
Year.scale <-  tibble(Year = seq(1977,2019,1)) %>%
mutate(Year_scale_centered=scale_this(Year))
#1 cpue.year
cpue.year <- cpue.year %>%
mutate(MeanBT_scale = scale_this(MeanBT)) %>%
mutate(TSB_Tonnes_scale = scale_this(TSB_Tonnes))
cpue.year <- left_join(cpue.year,Year.scale,
by = "Year")
#2 cpue.pair
cpue.pair <- cpue.pair %>%
mutate(MeanBT_scale = scale_this(MeanBT)) %>%
mutate(TSB_Tonnes_scale = scale_this(TSB_Tonnes))
cpue.pair <- left_join(cpue.pair,Year.scale,
by = "Year")
#3 cpue.length.year
cpue.length.year <- left_join(cpue.length.year,Year.scale,
by = "Year")
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# Create tibble Year.scale with scaled year variable
Year.scale <-  tibble(Year = seq(1977,2019,1)) %>%
mutate(Year_scale_centered=scale_this(Year))
Year.scale
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# Create tibble Year.scale with scaled year
Year.scale <-  tibble(Year = seq(1977,2019,1)) %>%
mutate(Year_scale_centered=scale_this(Year))
#1 scale variables in cpue.year
cpue.year <- cpue.year %>%
mutate(MeanBT_scale = scale_this(MeanBT)) %>%
mutate(TSB_Tonnes_scale = scale_this(TSB_Tonnes))
cpue.year <- left_join(cpue.year,Year.scale,
by = "Year")
#2 scale variables in cpue.pair
cpue.pair <- cpue.pair %>%
mutate(MeanBT_scale = scale_this(MeanBT)) %>%
mutate(TSB_Tonnes_scale = scale_this(TSB_Tonnes))
cpue.pair <- left_join(cpue.pair,Year.scale,
by = "Year")
#3 scale variables in cpue.length.year
cpue.length.year <- left_join(cpue.length.year,Year.scale,
by = "Year")
